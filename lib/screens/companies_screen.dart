import 'package:flutter/material.dart';
import '../models/company.dart';
import '../services/api_service.dart';

class CompaniesScreen extends StatefulWidget {
  const CompaniesScreen({super.key});

  @override
  State<CompaniesScreen> createState() => _CompaniesScreenState();
}

class _CompaniesScreenState extends State<CompaniesScreen> {
  final FirestoreWrapper _firestoreWrapper = FirestoreWrapper();
  List<Company> _companies = [];
  bool _isLoading = true;
  String? _error;

  @override
  void initState() {
    super.initState();
    _loadCompanies();
  }

  Future<void> _loadCompanies() async {
    try {
      setState(() {
        _isLoading = true;
        _error = null;
      });
      final companies = await _firestoreWrapper.getAllCompanies();
      setState(() {
        _companies = companies;
        _isLoading = false;
      });
    } catch (e) {
      setState(() {
        _error = e.toString();
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Companies'), backgroundColor: Theme.of(context).colorScheme.inversePrimary),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => const CreateCompanyScreen()),
          ).then((_) => _loadCompanies());
        },
        child: const Icon(Icons.add),
      ),
    );
  }

  Widget _buildBody() {
    if (_isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (_error != null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text('Error: $_error', style: const TextStyle(color: Colors.red), textAlign: TextAlign.center),
            const SizedBox(height: 16),
            ElevatedButton(onPressed: _loadCompanies, child: const Text('Retry')),
          ],
        ),
      );
    }

    if (_companies.isEmpty) {
      return const Center(child: Text('No companies found'));
    }

    return RefreshIndicator(
      onRefresh: _loadCompanies,
      child: ListView.builder(
        itemCount: _companies.length,
        itemBuilder: (context, index) {
          final company = _companies[index];
          return Card(
            margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 4),
            child: ListTile(
              leading: const CircleAvatar(child: Icon(Icons.business)),
              title: Text(company.name),
              subtitle: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  if (company.primaryContact != null) Text('Primary Contact: ${company.primaryContact}'),
                  if (company.secondaryContact != null) Text('Secondary Contact: ${company.secondaryContact}'),
                  Text('ID: ${company.id}'),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

class CreateCompanyScreen extends StatefulWidget {
  const CreateCompanyScreen({super.key});

  @override
  State<CreateCompanyScreen> createState() => _CreateCompanyScreenState();
}

class _CreateCompanyScreenState extends State<CreateCompanyScreen> {
  final _formKey = GlobalKey<FormState>();
  final FirestoreWrapper _firestoreWrapper = FirestoreWrapper();

  // Form controllers
  final _nameController = TextEditingController();
  final _primaryContactController = TextEditingController();
  final _secondaryContactController = TextEditingController();
  final _hubspotIdController = TextEditingController();

  // Loading state
  bool _isLoading = false;

  Future<void> _createCompany() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final company = Company(
        id: '', // Will be generated by Firestore
        name: _nameController.text.trim(),
        primaryContact: _primaryContactController.text.trim().isEmpty
            ? null
            : _primaryContactController.text.trim(),
        secondaryContact: _secondaryContactController.text.trim().isEmpty
            ? null
            : _secondaryContactController.text.trim(),
        hubspotId: _hubspotIdController.text.trim().isEmpty
            ? null
            : _hubspotIdController.text.trim(),
      );

      await _firestoreWrapper.createCompany(company);

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Company created successfully!')),
        );
        Navigator.pop(context, true);
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error creating company: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  void dispose() {
    _nameController.dispose();
    _primaryContactController.dispose();
    _secondaryContactController.dispose();
    _hubspotIdController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Create Company'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Form(
        key: _formKey,
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: const InputDecoration(
                  labelText: 'Company Name *',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter a company name';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),

              TextFormField(
                controller: _primaryContactController,
                decoration: const InputDecoration(
                  labelText: 'Primary Contact (Optional)',
                  border: OutlineInputBorder(),
                  hintText: 'Contact ID or reference',
                ),
              ),
              const SizedBox(height: 16),

              TextFormField(
                controller: _secondaryContactController,
                decoration: const InputDecoration(
                  labelText: 'Secondary Contact (Optional)',
                  border: OutlineInputBorder(),
                  hintText: 'Contact ID or reference',
                ),
              ),
              const SizedBox(height: 16),

              TextFormField(
                controller: _hubspotIdController,
                decoration: const InputDecoration(
                  labelText: 'HubSpot ID (Optional)',
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 24),

              Row(
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: _isLoading ? null : () => Navigator.pop(context),
                      child: const Text('Cancel'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: _isLoading ? null : _createCompany,
                      child: _isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Text('Create Company'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}
